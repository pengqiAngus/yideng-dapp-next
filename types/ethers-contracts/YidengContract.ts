/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface YidengContractInterface extends utils.Interface {
  functions: {
    "EXCHANGE_RATE()": FunctionFragment;
    "INTEREST_BASE()": FunctionFragment;
    "INTEREST_RATE()": FunctionFragment;
    "SECONDS_PER_DAY()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculateInterest(address)": FunctionFragment;
    "claimInterest()": FunctionFragment;
    "decimals()": FunctionFragment;
    "ethBalance(address)": FunctionFragment;
    "name()": FunctionFragment;
    "stakeEth()": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXCHANGE_RATE"
      | "INTEREST_BASE"
      | "INTEREST_RATE"
      | "SECONDS_PER_DAY"
      | "allowance"
      | "balanceOf"
      | "calculateInterest"
      | "claimInterest"
      | "decimals"
      | "ethBalance"
      | "name"
      | "stakeEth"
      | "stakes"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXCHANGE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimInterest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "ethBalance", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "stakeEth", values?: undefined): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXCHANGE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "EthDeposited(address,uint256)": EventFragment;
    "EthWithdrawn(address,uint256)": EventFragment;
    "InterestEarned(address,uint256)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "TokensBurned(address,uint256)": EventFragment;
    "TokensMinted(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unstaked(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestEarned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface EthDepositedEventObject {
  from: string;
  amount: BigNumber;
}
export type EthDepositedEvent = TypedEvent<
  [string, BigNumber],
  EthDepositedEventObject
>;

export type EthDepositedEventFilter = TypedEventFilter<EthDepositedEvent>;

export interface EthWithdrawnEventObject {
  to: string;
  amount: BigNumber;
}
export type EthWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  EthWithdrawnEventObject
>;

export type EthWithdrawnEventFilter = TypedEventFilter<EthWithdrawnEvent>;

export interface InterestEarnedEventObject {
  user: string;
  amount: BigNumber;
}
export type InterestEarnedEvent = TypedEvent<
  [string, BigNumber],
  InterestEarnedEventObject
>;

export type InterestEarnedEventFilter = TypedEventFilter<InterestEarnedEvent>;

export interface StakedEventObject {
  user: string;
  ethAmount: BigNumber;
  tokenAmount: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface TokensBurnedEventObject {
  from: string;
  amount: BigNumber;
}
export type TokensBurnedEvent = TypedEvent<
  [string, BigNumber],
  TokensBurnedEventObject
>;

export type TokensBurnedEventFilter = TypedEventFilter<TokensBurnedEvent>;

export interface TokensMintedEventObject {
  to: string;
  amount: BigNumber;
}
export type TokensMintedEvent = TypedEvent<
  [string, BigNumber],
  TokensMintedEventObject
>;

export type TokensMintedEventFilter = TypedEventFilter<TokensMintedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnstakedEventObject {
  user: string;
  tokenAmount: BigNumber;
  ethAmount: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface YidengContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YidengContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXCHANGE_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INTEREST_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SECONDS_PER_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimInterest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    ethBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    stakeEth(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        stakingTime: BigNumber;
        lastInterestCalculationTime: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstake(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  EXCHANGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  INTEREST_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  INTEREST_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  SECONDS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  calculateInterest(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimInterest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  ethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  stakeEth(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      stakingTime: BigNumber;
      lastInterestCalculationTime: BigNumber;
    }
  >;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstake(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXCHANGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimInterest(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    ethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    stakeEth(overrides?: CallOverrides): Promise<void>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        stakingTime: BigNumber;
        lastInterestCalculationTime: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unstake(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "EthDeposited(address,uint256)"(
      from?: string | null,
      amount?: null
    ): EthDepositedEventFilter;
    EthDeposited(from?: string | null, amount?: null): EthDepositedEventFilter;

    "EthWithdrawn(address,uint256)"(
      to?: string | null,
      amount?: null
    ): EthWithdrawnEventFilter;
    EthWithdrawn(to?: string | null, amount?: null): EthWithdrawnEventFilter;

    "InterestEarned(address,uint256)"(
      user?: string | null,
      amount?: null
    ): InterestEarnedEventFilter;
    InterestEarned(
      user?: string | null,
      amount?: null
    ): InterestEarnedEventFilter;

    "Staked(address,uint256,uint256)"(
      user?: string | null,
      ethAmount?: null,
      tokenAmount?: null
    ): StakedEventFilter;
    Staked(
      user?: string | null,
      ethAmount?: null,
      tokenAmount?: null
    ): StakedEventFilter;

    "TokensBurned(address,uint256)"(
      from?: string | null,
      amount?: null
    ): TokensBurnedEventFilter;
    TokensBurned(from?: string | null, amount?: null): TokensBurnedEventFilter;

    "TokensMinted(address,uint256)"(
      to?: string | null,
      amount?: null
    ): TokensMintedEventFilter;
    TokensMinted(to?: string | null, amount?: null): TokensMintedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unstaked(address,uint256,uint256)"(
      user?: string | null,
      tokenAmount?: null,
      ethAmount?: null
    ): UnstakedEventFilter;
    Unstaked(
      user?: string | null,
      tokenAmount?: null,
      ethAmount?: null
    ): UnstakedEventFilter;
  };

  estimateGas: {
    EXCHANGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimInterest(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    ethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    stakeEth(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstake(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXCHANGE_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTEREST_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_PER_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimInterest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeEth(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstake(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
